{
  "swagger": "2.0",
  "info": {
    "description": "Gafarsa logistics api documentations",
    "version": "1.0.0",
    "title": "Gafarsa Logistics API Documentations",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "apiteam@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "Auth",
      "description": "Everything Authentication"
    },
    {
      "name": "Users",
      "description": "Users related api"
    }
  ],
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "description": "Enter JWT Bearer token as **Bearer &lt;token>**"
    }
  },
  "paths": {
    "/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "Registers a single user",
        "description": "Creates a new user with the provided information.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "user",
            "description": "User to be registered",
            "required": true,
            "schema": {
              "$ref": "#/definitions/register"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User registered successfully",
            "schema": {
              "$ref": "#/definitions/registerResponse"
            }
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "Login a single user",
        "description": "Login with email and password",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "login",
            "description": "Login with username and password",
            "required": true,
            "schema": {
              "$ref": "#/definitions/login"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully login",
            "schema": {
              "$ref": "#/definitions/loginResponse"
            }
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": ["Users"],
        "summary": "Get all users",
        "description": "Retrieves a list of all user data.",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of users.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/user/{id}": {
      "get": {
        "tags": ["Users"],
        "summary": "Get user by ID",
        "description": "Retrieves a single user by ID.",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the user to retrieve",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A single user.",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": ["Users"],
        "summary": "Update user by ID",
        "description": "Updates a single user's information.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the user to update",
            "type": "string"
          },
          {
            "in": "body",
            "name": "user",
            "description": "User object with updated fields",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User updated successfully."
          },
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": ["Users"],
        "summary": "Delete user by ID",
        "description": "Deletes a single user.",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the user to delete",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully."
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/stores/create-store": {
      "post": {
        "tags": ["Stores"],
        "summary": "Create a single store",
        "description": "Creates a new store with the provided information.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "form_data": {
              "logo": "logo_file",
              "documents": "docuement_file",
              "jsonData": "stringifiedJsonData"
            },
            "required": true,
            "schema": {
              "$ref": "#/definitions/Store"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User registered successfully",
            "schema": {
              "$ref": "#/definitions/registerResponse"
            }
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/store/{id}": {
      "get": {
        "tags": ["Stores"],
        "summary": "Get store by ID",
        "description": "Retrieves a single store by ID.",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the store to retrieve",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A single store.",
            "schema": {
              "$ref": "#/definitions/Store"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": ["Stores"],
        "summary": "Update store by ID",
        "description": "Updates a single store's information.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the store to update",
            "type": "string"
          },
          {
            "in": "body",
            "name": "store",
            "description": "User object with updated fields",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Store"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Store updated successfully."
          },
          "400": {
            "description": "Invalid Store supplied"
          },
          "404": {
            "description": "Store not found"
          }
        }
      },
      "delete": {
        "tags": ["Stores"],
        "summary": "Delete store by ID",
        "description": "Deletes a single store.",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the store to delete",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Store deleted successfully."
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Store not found"
          }
        }
      }
    },
    "/store/owner-stores/{id}": {
      "get": {
        "tags": ["Stores"],
        "summary": "Get stores by Owner ID",
        "description": "Retrieves stores by owner ID.",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Using owner ID retrive stores",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Multiple stores of owner",
            "schema": {
              "$ref": "#/definitions/Store"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Store not found"
          }
        }
      }
    },
    "/store/categories": {
      "get": {
        "tags": ["Stores"],
        "summary": "Get store categories",
        "description": "Retrieves store categories",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Multiple categories of stores",
            "schema": {
              "$ref": "#/definitions/Store"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Categories not found"
          }
        }
      }
    },
    "store/sub-categories/{id}": {
      "get": {
        "tags": ["Stores"],
        "summary": "Get sub categories by category ID",
        "description": "Retrieves sub categories by category ID.",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Using category ID retrive sub categories",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Multiple  sub categories of category",
            "schema": {
              "$ref": ""
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Sub categories not found!"
          }
        }
      }
    },
    "/voucher": {
      "post": {
        "tags": ["Voucher"],
        "summary": "Create a new voucher",
        "description": "Adds a new voucher to the database using form data.",
        "consumes": ["multipart/form-data"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "formData",
            "name": "image",
            "type": "file",
            "description": "Image file for the voucher",
            "required": false
          },
          {
            "in": "formData",
            "name": "voucherData",
            "type": "string",
            "description": "JSON string of the voucher data. Example:",
            "required": true,
            "example": "{\n  \"creator\": \"664d8e07c99402824cb13dc9\",\n  \"store\": \"665761d0c37b8003332547ca\",\n  \"discount\": 15,\n  \"storeName\": \"Test store\",\n  \"endDate\": \"1995-06-13\",\n  \"voucherCode\": \"PROMO123\",\n  \"redeemLimit\": 27,\n  \"condition\": \"testing it\"\n}"
          }
        ],
        "responses": {
          "200": {
            "description": "Voucher created successfully"
          },
          "400": {
            "description": "Invalid input data"
          }
        }
      },
      "get": {
        "tags": ["Voucher"],
        "summary": "Get all vouchers",
        "description": "Retrieves all vouchers from the database.",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "A list of vouchers",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Voucher"
              }
            }
          }
        }
      }
    },
    "/voucher/clipped-for-later": {
      "post": {
        "tags": ["Voucher"],
        "summary": "Clipped For later use",
        "description": "Clipped a voucher for later use",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "clipped-voucher",
            "description": "voucher to be clipped!",
            "required": true,
            "schema": {
              "$ref": "#/definitions/clipped-voucher"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully added to clipped list!"
          },
          "501": {
            "description": "Error Found! Can not added to clipped list!"
          }
        }
      }
    },
    "/voucher/clipped-details/{id}": {
      "get": {
        "tags": ["Voucher"],
        "summary": "Get user wise clipped voucher details!",
        "description": "Get user wise clipped voucher details!",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Using user ID retrive clipped voucher details!",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Clipped Details Succesfully retrive!",
            "schema": {
              "$ref": ""
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Clipped Details not found!"
          }
        }
      }
    },
    "/category/create": {
      "post": {
        "tags": ["Categories"],
        "summary": "Create a single category",
        "description": "Creates a new category with the provided information.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "form_data": {
              "logo": "logo_file",
              "jsonData": "stringifiedJsonData"
            },
            "required": true,
            "schema": {
              "$ref": "#/definitions/categories"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Category Created successfully",
            "schema": {
              "$ref": "#/definitions/categories"
            }
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/category/{id}": {
      "get": {
        "tags": ["Categories"],
        "summary": "Get category by ID",
        "description": "Retrieves a single category by ID",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the category to retrieve",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A single category.",
            "schema": {
              "$ref": "#/definitions/categories"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Categories not found!"
          }
        }
      },
      "patch": {
        "tags": ["Categories"],
        "summary": "Update category by ID",
        "description": "Updates a single category's information.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the category to update",
            "type": "string"
          },
          {
            "in": "body",
            "name": "category",
            "description": "category object with updated fields",
            "required": true,
            "schema": {
              "$ref": "#/definitions/categories"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "category updated successfully."
          },
          "400": {
            "description": "Invalid category supplied"
          },
          "404": {
            "description": "category not found"
          }
        }
      },
      "delete": {
        "tags": ["Categories"],
        "summary": "Delete category by ID",
        "description": "Delete a single category.",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the category to delete",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "category deleted successfully."
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "category not found"
          }
        }
      }
    },
    "/category/get-all-categories": {
      "get": {
        "tags": ["Categories"],
        "summary": "Get All category info",
        "description": "Retrieves all categories",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Retrive All category info",
            "schema": {
              "$ref": "#/definitions/categories"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Categories not found!"
          }
        }
      }
    }
  },
  "definitions": {
    "register": {
      "type": "object",
      "required": ["businessName", "userName", "email", "password"],
      "properties": {
        "businessName": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "address": {
          "type": "string"
        }
      }
    },
    "registerResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "login": {
      "type": "object",
      "required": ["email", "password"],
      "properties": {
        "email": {
          "type": "string",
          "example": "ruhul.cse123@gmail.com"
        },
        "password": {
          "type": "string",
          "example": "test123"
        }
      }
    },
    "loginResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "_id": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "token": {
          "type": "string"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "example": "6601e50217fc70b39ecc269b"
        },
        "businessName": {
          "type": "string",
          "example": "Goru khor"
        },
        "userName": {
          "type": "string",
          "example": "mmSohan"
        },
        "email": {
          "type": "string",
          "example": "momin.sohan@gmail.com"
        },
        "phoneNumber": {
          "type": "string",
          "example": "01721553967"
        },
        "address": {
          "type": "string",
          "example": "Badda, Dhaka"
        },
        "userType": {
          "type": "string",
          "example": "Admin"
        },
        "userStatus": {
          "type": "string",
          "example": "Active"
        },
        "createdAt": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        }
      }
    },
    "Store": {
      "type": "object",
      "required": ["store_name", "category", "location", "logo"],
      "properties": {
        "store_name": {
          "type": "string"
        },
        "category": {
          "type": "string"
        },
        "sub_category": {
          "type": "string"
        },
        "address": {
          "type": "object",
          "properties": {
            "street": {
              "type": "string"
            },
            "city": {
              "type": "string"
            },
            "country": {
              "type": "string"
            },
            "postal_code": {
              "type": "string"
            }
          }
        },
        "website_link": {
          "type": "string"
        },
        "social_media_link": {
          "type": "string"
        },
        "business_hours": {
          "type": "string"
        },
        "location": {
          "type": "object",
          "properties": {
            "coordinates": {
              "type": "array",
              "items": {
              "type": "number"
            }
            },
            "type": {
              "type": "string"
            }
          }
        },
        "documents": {
          "type": "string"
        },
        "logo": {
          "type": "string"
        }
      }
    },
    "categories": {
      "type": "object",
      "required": ["category_name", "logo"],
      "properties": {
        "category_name": {
          "type": "string"
        },
        "logo": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "clipped-voucher":{
      "type": "object",
      "required": ["consume_by", "clipped_vouchers"],
      "properties": {
        "consume_by": {
          "type": "string",
          "definitions":"user id"
        },
        "clipped_vouchers": {
          "type": "array",
          "items": {
              "type": "string"
            }
        }
      }
    }
    
  }
}
